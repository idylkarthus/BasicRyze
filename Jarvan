if myHero.charName ~= "JarvanIV" then return end
require("UPL")
UPL = UPL()
require "VPrediction"
TITANIC = false
TITANICSLOT = nil
TIAMAT = false
CanE = false
smite = nil
ultActive = false
Middlespot = nil
middlex = nil
middlez = nil
TIAMATSLOT = nil
local VP = VPrediction()
function OnLoad()
    Config = scriptConfig("Jarvan Dude", "JJ")
    Config:addParam("shoot", "Shoot", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("C"))
    Config:addParam("harass", "Harass", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("X"))
    Config:addParam("flee", "Flee", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("T"))
    targetSelector = TargetSelector(TARGET_LESS_CAST, 900, DAMAGE_PHYSICAL, true)


    UPL:AddToMenu(Config)
    UPL:AddSpell(_Q, { speed = 1400, delay = 0.25, range = 770, width = 70, collision = false, aoe = false, type = "linear" })
    UPL:AddSpell(_E, { speed = math.huge, delay = 0.85, range = 830, width = 75, collision = false, aoe = true, type = "linear" })
    UPL:AddSpell(_R, { speed = math.huge, delay = 0.25, range = 650, width = 325, collision = false, aoe = true, type = "linear" })
end

function OnTick()
	GetTiamat()
	GetTitanic()
	targetSelector:update()
	Target = targetSelector.target
	if Config.shoot then
		Combo()
	end
	if Config.flee then
		Flee()
	end
	if Config.harass then
		Harass()
	end
	if myHero:CanUseSpell(_R) == READY then
		RSteal()
	end
	smiteDmg = 20 + 8 * myHero.level
	ignitedmg = 50 + 20*myHero.level
	if smite == nil then
		smite = Slot("S5_SummonerSmitePlayerGanker")
	else
		ksSmite()
	end
	if ignite == nil then
		smite = Slot("SummonerDot")
	else
		ksIgnite()
	end
end

function ksSmite()
    if smite then
        for i, enemy in pairs(GetEnemyHeroes()) do
            if ValidTarget(enemy, 500) then
                if enemy.health < smiteDmg then
                    CastSpell(smite, enemy)
                end
            end
        end
    end
end


function ksIgnite()
    if ignite then
        for i, enemy in pairs(GetEnemyHeroes()) do
            if ValidTarget(enemy, 500) then
                if enemy.health < igniteDmg then
                    CastSpell(ignite, enemy)
                end
            end
        end
    end
end

function Slot(name)
    if myHero:GetSpellData(SUMMONER_1).name == name then
        return SUMMONER_1
    elseif myHero:GetSpellData(SUMMONER_2).name == name then
        return SUMMONER_2
    end
end


function Flee()
	if myHero:CanUseSpell(_E) == READY and myHero:CanUseSpell(_Q) == READY then
		CalcAndCastKS(myHero, mousePos, 760, 770)
	end
	myHero:MoveTo(mousePos.x, mousePos.z)
end

function OnDraw()

end

function FindSlotByName(name)
  	if name ~= nil then
    	for i=0, 12 do
      		if string.lower(myHero:GetSpellData(i).name) == string.lower(name) then
        		return i
      		end
    	end
  	end  
  	return nil
end

function GetItem(name)
  	local slot = FindSlotByName(name)
  	return slot 
end


function CastTiamat()
  	if TIAMAT then
    	if (myHero:CanUseSpell(TIAMATSLOT) == READY) then
     		CastSpell(TIAMATSLOT)
    	end
  	end
end

function CastTITANIC()
  	if TITANIC then
    	if (myHero:CanUseSpell(TITANICSLOT) == READY) then
      		CastSpell(TITANICSLOT)
    	end
  	end
end

function GetTiamat()
  	local slot = GetItem("ItemTiamatCleave")
  	if (slot ~= nil) then
    	TIAMAT = true
    	TIAMATSLOT = slot
  	else
    	TIAMAT = false
  	end
end

function GetTitanic()
  	local slot = GetItem("ItemTitanicHydraCleave")
  	if (slot ~= nil) then
    	TITANIC = true
    	TITANICSLOT = slot
  	else
    	TITANIC = false
  	end
end

function Harass()
	if Target then
		if myHero:CanUseSpell(_Q) == READY and GetDistance(Target) < 770 then
			CastQ()
		end
	end
end

function Combo()
	if Target then
		if myHero:CanUseSpell(_E) == READY then
			CanE = true
		end
		if myHero:CanUseSpell(_E) ~= READY then
			DelayAction(function() CantE() end, 0.5)
		end
		if myHero:CanUseSpell(_Q) == READY and GetDistance(Target) < 770 and CanE == false then
			CastQ()
		end
		if myHero:CanUseSpell(_W) == READY and GetDistance(Target) < 600 and myHero:CanUseSpell(_Q) ~= READY and myHero:CanUseSpell(_E) ~= READY then
			CastW()
		end
		if myHero:CanUseSpell(_Q) ~= READY then
			if myHero:CanUseSpell(_E) == READY and GetDistance(Target) < 830 then
				CastE()
			end
		else
			if myHero:CanUseSpell(_E) == READY and GetDistance(Target) < 770 then
				CastE()
			end
		end
		if GetDistance(Target) < 440 and myHero:CanUseSpell(_Q) ~= READY and myHero:CanUseSpell(_E) ~= READY then
			CastTiamat()
		end
		if GetDistance(Target) < 440 and myHero:CanUseSpell(_Q) ~= READY and myHero:CanUseSpell(_E) ~= READY then
			CastTITANIC()
		end	
	end
end

function CantE()
	CanE = false
end

function GetRDamage(unit)
	local Rlvl = myHero:GetSpellData(_R).level
	if Rlvl < 1 then return 0 end
	local RDmg = {200, 325, 450}
	local RDmgMod = 1.50
	local DmgRaw = RDmg[Rlvl] + (myHero.damage * RDmgMod)
	local Dmg = myHero:CalcDamage(unit, DmgRaw)
	return Dmg
end

function GetEDamage(unit)
	local Elvl = myHero:GetSpellData(_E).level
	if Elvl < 1 then return 0 end
	local EDmg = {60, 105, 150, 195, 240}
	local EDmgMod = 0.80
	local DmgRaw = EDmg[Elvl] + (myHero.damage * EDmgMod)
	local Dmg = myHero:CalcMagicDamage(unit, DmgRaw)
	return Dmg
end

function GetQDamage(unit)
	local Qlvl = myHero:GetSpellData(_Q).level
	if Qlvl < 1 then return 0 end
	local QDmg = {70, 115, 160, 205, 250}
	local QDmgMod = 1.20
	local DmgRaw = QDmg[Qlvl] + (myHero.damage * QDmgMod)
	local Dmg = myHero:CalcDamage(unit, DmgRaw)
	return Dmg
end


function CastQ()
	if Target == nil then 
		return 
	end
	CastPosition, HitChance, HeroPosition = UPL:Predict(_Q, myHero, targetSelector.target)
	if CastPosition and HitChance > 0 then
		CastSpell(_Q, CastPosition.x, CastPosition.z)
	end
end

function FlagQ(CastPositionx, CastPositionz)
	if CastPositionx and CastPositionz then
		CastSpell(_Q, CastPositionx, CastPositionz)
	end
end

function CastW()
	CastSpell(_W)
end

function CastE()
	if Target == nil then 
		return 
	end
	CastPosition, HitChance, HeroPosition = UPL:Predict(_E, myHero, targetSelector.target)
	if CastPosition and HitChance > 0 then
		if myHero:CanUseSpell(_Q) == READY and myHero:CanUseSpell(_E) == READY then
			CalcAndCastKS(myHero, CastPosition, GetDistance(CastPosition)+70, 770)
		elseif myHero:CanUseSpell(_E) == READY then
			CastSpell(_E, CastPosition.x, CastPosition.z)
		end
	end
end

function CalcAndCast(FromPos, TooPos, PlaceRange, CheckRange)
	FirstPos = Vector(FromPos.x, FromPos.z)
	SecondPos = Vector(TooPos.x, TooPos.z)
	NextBarrelrange = Vector(FirstPos + (SecondPos-FirstPos):normalized() * PlaceRange)
	NextBarrelSpot = Vector(NextBarrelrange.x, myHero.y, NextBarrelrange.y)
	if GetDistance(NextBarrelSpot) < CheckRange and myHero:CanUseSpell(_E) == READY then
		CastSpell(_E, NextBarrelSpot.x, NextBarrelSpot.z)
		return "casted"
	else
		return nil
	end
end


function CalcAndCastKS(FromPos, TooPos, PlaceRange, CheckRange)
	FirstPos = Vector(FromPos.x, FromPos.z)
	SecondPos = Vector(TooPos.x, TooPos.z)
	NextBarrelrange = Vector(FirstPos + (SecondPos-FirstPos):normalized() * PlaceRange)
	NextBarrelSpot = Vector(NextBarrelrange.x, myHero.y, NextBarrelrange.y)
	if GetDistance(NextBarrelSpot) < CheckRange and myHero:CanUseSpell(_E) == READY then
		CastSpell(_E, NextBarrelSpot.x, NextBarrelSpot.z)
		CastX = NextBarrelSpot.x
		CastZ = NextBarrelSpot.z
		DelayAction(function() FlagQ(CastX, CastZ) end, 0.01)
		return "casted"
	else
		return nil
	end
end


function RSteal() 
	if ultActive == false then
		for i,enemy in pairs(GetEnemyHeroes()) do
    			if not enemy.dead and enemy.visible then
				if myHero:CanUseSpell(_Q) == READY then
					if ValidTarget(enemy, 770) then
						if enemy.health < GetQDamage(enemy) then
							CastPositionQ, HitChance, HeroPosition = UPL:Predict(_Q, myHero, enemy)
							if CastPositionQ and HitChance > 0 then 
								CastSpell(_Q, CastPositionQ.x, CastPositionQ.z)
							end
						end
					end
				end
				if myHero:CanUseSpell(_E) == READY then
					if ValidTarget(enemy, 830) then
						if enemy.health < GetEDamage(enemy) then
							CastPositionE, HitChance, HeroPosition = UPL:Predict(_E, myHero, enemy)
							if CastPositionE and HitChance > 0 then
								CastSpell(_E, CastPositionE.x, CastPositionE.z)
							end
						end
					end
				end
				if myHero:CanUseSpell(_R) == READY then
					if ValidTarget(enemy, 650) then
						if enemy.health < GetRDamage(enemy) then
							CastSpell(_R, enemy)
						end
					elseif ValidTarget(enemy, 1350) then
						if enemy.health < GetRDamage(enemy) and myHero:CanUseSpell(_E) == READY and myHero:CanUseSpell(_Q) == READY then
							CalcAndCastKS(myHero, enemy, 760, 770)
						end
					end
				end
			end
		end
	elseif CountEnemyHeroInRange(650) == 0 then
		CastSpell(_R)
	end
end


function OnUpdateBuff(Src, Buff, iStacks)
	if Src == myHero then
	end
end

function OnCreateObj(obj)
	if GetDistance(obj) < 1000 then
	end
	if obj.name == "JarvanIVWall" then
		ultActive = true
		Middlespot = obj
		middlex = myHero.x
		middlez = myHero.z
	end
	if obj.name == "jarvancataclysm_sound.troy" then
	end
	if obj.name == "JarvanWallCrumble.troy" then
		ultActive = false
		Middlespot = nil
		middlex = nil
		middlez = nil
	end
end

function OnDeleteteObj(obj)

end

function OnProcessSpell(unit, spell)
	if unit == myHero then
	end
end
